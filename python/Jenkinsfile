properties([
    parameters([
        choice(name: "SERVICE", choices: ["genric-backend"], description: "services to be build"),
        choice(name: "PORT", choices: ["8085"], description: "port to be used"),
    ])
])


env.MAINTAINER= "maintainer@geminisolutions.com"
env.BRANCH_CENTRALIZED_FILES="*/main"
env.SSH_LINK_CENTRALIZED_FILES="git@github.com:Gemini-Solutions/centralized-repo.git"

if(params.SERVICE=="genric-backend")
{
    env.SSH_LINK= 'git@github.com:Gemini-Solutions/generic_workflow_backend.git'
    env.BRANCH= "*/dev*"
}

env.REGISTRY= params.SERVICE.toLowerCase()
env.TRIVY_NODE = 'image_builder_trivy'
env.TRIVY_CONTAINER = 'docker-image-builder-trivy'

//Docker and Deployment Stage
node("${env.TRIVY_NODE}") {
   stage('Repo_Checkout') {
         dir ("${env.SERVICE}") {
         checkout([$class: 'GitSCM', branches: [[name: "$BRANCH"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg:  [], \
userRemoteConfigs: [[credentialsId: 'admingithub', url: "$SSH_LINK"]]])
         }
    }
       try {
        stage('Checkout_Centralized_Files') {
           dir ("${env.SERVICE}") {
               checkout([$class: 'GitSCM', 
               branches: [[name: "$BRANCH_CENTRALIZED_FILES"]], 
               doGenerateSubmoduleConfigurations: false, 
               extensions: [], 
               submoduleCfg:  [], 
               userRemoteConfigs: [[credentialsId: 'admingithub', 
               url: "$SSH_LINK_CENTRALIZED_FILES", 
               poll: 'false']]])
	       sh 'ls -la python/'
// 	       sh 'cd Java'
	       sh 'pwd'
           }
       }
       stage('Build_image') {
                dir ("${env.SERVICE}") {
			container("${env.TRIVY_CONTAINER}") {
                  withCredentials([usernamePassword(credentialsId: 'docker_registry', passwordVariable: 'docker_pass', usernameVariable: 'docker_user')]) {
                //   sh 'echo TYPE is : $SERVICE'
		        //   sh 'sed -i -e "s/SERVICE/$SERVICE/g" DockerFile deployment-type.yaml' 
		  sh 'ls'
		  sh 'pwd'
                  sh 'sed -i -e "s/PORT/$PORT/g" -e "s/REGISTRY/$REGISTRY/g" -e "s/COPY_CMD/$COPY_CMD/g" -e "s/IMAGE/$IMAGE/g" python/DockerFile python/Deployment-beta.yaml'
		          sh 'cat DockerFile'	  
                  sh 'docker image build -f python/DockerFile --build-arg REGISTRY=$REGISTRY -t registry-np.geminisolutions.com/$REGISTRY:1.0-$BUILD_NUMBER -t registry-np.geminisolutions.com/$REGISTRY .'
                  sh 'trivy image -f json registry-np.geminisolutions.com/$REGISTRY:1.0-$BUILD_NUMBER > trivy-report.json' archiveArtifacts artifacts: 'trivy-report.json', onlyIfSuccessful: true
//                   sh '''docker login -u $docker_user -p $docker_pass https://registry-np.geminisolutions.com'''
//                   sh 'docker push registry-np.geminisolutions.com/$REGISTRY:1.0-$BUILD_NUMBER'
//                   sh 'docker push registry-np.geminisolutions.com/$REGISTRY'
                  sh 'rm -rf build/'
               }
             }
          }
       }
       stage('Deployment_stage') {
               dir ("${env.SERVICE}") {
                   container("${env.TRIVY_CONTAINER}") {
                   kubeconfig(credentialsId: 'KubeConfigCred') {
//                    sh '/usr/local/bin/kubectl apply -f python/Deployment-beta.yaml -n dev'
//                    sh '/usr/local/bin/kubectl rollout restart Deployment $REGISTRY -n dev'

                   }
                 }
               }
           }
    } finally {
         //sh 'echo current_image="registry-np.geminisolutions.com/helpdesk/server:1.0-$BUILD_NUMBER" > build.properties'
         //archiveArtifacts artifacts: 'build.properties', onlyIfSuccessful: true
         }
        }
