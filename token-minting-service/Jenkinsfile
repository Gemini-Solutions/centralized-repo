node {
  stage('SCM') {
    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg:  [], \
    userRemoteConfigs: [[credentialsId: 'admingithub', url: 'git@github.com:Gemini-Solutions/token-minting-service.git']]])
  }
  stage('SonarQube Analysis') {
    def mvn = tool 'Default Maven';
    withSonarQubeEnv() {
      sh "${mvn}/bin/mvn clean verify sonar:sonar -Dsonar.projectKey=Token-minting-Svc -Dsonar.projectName=Token-minting-Svc"
    }
  }
  stage('Quality Gate') {
    timeout (time: 5, unit: 'MINUTES') {
       waitForQualityGate abortPipeline: true
       echo "code is good"
    }
  }
}
node('maven_runner_java11') {
      stage('Maven_Build') {
            container('maven-runner-11') {
             dir ('tokenmintingsvc') {
                sh 'rm -rf target'
                sh 'mvn package -Dmaven.test.skip=true'
                dir ('target'){
                sh 'chmod +x *.jar'
                }
           }
            }
         }
      }


    node('image_builder_trivy') {
      try {
        stage('Checkout_Centralized_Files') {
           dir ('tokenmintingsvc/centralized') {
               checkout([$class: 'GitSCM', 
               branches: [[name: '*/main']], 
               doGenerateSubmoduleConfigurations: false, 
               extensions: [], 
               submoduleCfg:  [], 
               userRemoteConfigs: [[credentialsId: 'admingithub', 
               url: 'git@github.com:Gemini-Solutions/centralized-repo.git', 
               poll: 'false']]])
	             sh 'ls -la'
           }
       }
       stage('Build_image') {
                dir ('tokenmintingsvc') {
                  container('docker-image-builder-trivy') {
                    //checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg:  [], \
    //userRemoteConfigs: [[credentialsId: 'gitea', url: 'https://gemgitea.geminisolutions.com/an.kumar/AccessControl.git']]])
                  withCredentials([usernamePassword(credentialsId: 'docker_registry', passwordVariable: 'docker_pass', usernameVariable: 'docker_user')]) {
                  sh 'docker image build -f centralized/token-minting-service/DockerFile -t registry-np.geminisolutions.com/tokenmintingsvc/tokenmintingsvc:1.0-$BUILD_NUMBER -t registry-np.geminisolutions.com/tokenmintingsvc/tokenmintingsvc .'
                  sh 'trivy image -f json --timeout 20m --offline-scan registry-np.geminisolutions.com/tokenmintingsvc/tokenmintingsvc:1.0-$BUILD_NUMBER > trivy-report.json'
	      archiveArtifacts artifacts: 'trivy-report.json', onlyIfSuccessful: true
		   withCredentials([string(credentialsId: 'Defectdojo_Token', variable: 'defectdojo_token')]) {
		      sh ''' 
			curl -X 'POST' \
			  -H 'accept: application/json' \
			  -H "Authorization: Token ${defectdojo_token}" \
			  -H 'Content-Type: multipart/form-data' \
			  -F "scan_date=$(date +%Y-%m-%d)" \
			  -F 'lead=1' \
			  -F 'minimum_severity=Info' \
			  -F 'active=true' \
			  -F 'verified=true' \
			  -F "scan_type=Trivy Scan"\
			  -F "file=@trivy-report.json;type=application/json"\
			  -F "product_name=Token-minting-Svc"\
			  -F "engagement_name=Token-minting-Svc" \
			  -F 'close_old_findings=true' \
			  -F 'push_to_jira=false' \
			  -F 'auto_create_context=true' \
			   https://defectdojo-np.geminisolutions.com//api/v2/reimport-scan/
			'''      
		      }
                       sh '''docker login -u $docker_user -p $docker_pass https://registry-np.geminisolutions.com'''
                  sh 'docker push registry-np.geminisolutions.com/tokenmintingsvc/tokenmintingsvc:1.0-$BUILD_NUMBER'
                  sh 'docker push registry-np.geminisolutions.com/tokenmintingsvc/tokenmintingsvc'
                  sh 'rm -rf dist/'
                }
            }
          }
        }
        stage('Deployment_stage') {
                dir ('tokenmintingsvc') {
                    container('docker-image-builder-trivy') {
                    kubeconfig(credentialsId: 'KubeConfigCred') {
                        sh '/usr/local/bin/kubectl apply -f centralized/token-minting-service/Deployment-beta.yaml -n dev'
                        sh '/usr/local/bin/kubectl rollout restart Deployment tokenmintingsvc -n dev'
                    }
                }
            }
        }
     } finally {
         //sh 'echo current_image="registry-np.geminisolutions.com/tokenmintingsvc/tokenmintingsvc:1.0-$BUILD_NUMBER" > build.properties'
         //archiveArtifacts artifacts: 'build.properties', onlyIfSuccessful: true
    }
}
node("zap_scan"){
    stage("ZAP SCan"){
       
        container("zap-scan"){
            dir("zap_test"){
                sh 'zap-full-scan.py -t https://tokenmintingsvc.geminisolutions.com/ -r zap_report.html -x zap_report.xml | true'
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: '/zap/wrk/', reportFiles: 'zap_report.html', reportName: 'HTML Report', reportTitles: 'ZAP Report', useWrapperFileDirectly: true])
                withCredentials([string(credentialsId: 'Defectdojo_Token', variable: 'defectdojo_token')]) {
                sh '''
		curl -X 'POST' \
		  -H 'accept: application/json' \
		  -H "Authorization: Token ${defectdojo_token}" \
		  -H 'Content-Type: multipart/form-data' \
		  -F "scan_date=$(date +%Y-%m-%d)" \
		  -F 'lead=1' \
		  -F 'minimum_severity=Info' \
		  -F 'active=true' \
		  -F 'verified=true' \
		  -F "scan_type=ZAP Scan"\
		  -F "file=@/zap/wrk/zap_report.xml;type=application/json"\
		  -F "product_name=Token-minting-Svc"\
		  -F "engagement_name=Token-minting-Svc" \
		  -F 'close_old_findings=true' \
		  -F 'push_to_jira=false' \
		  -F 'auto_create_context=true' \
		   https://defectdojo-np.geminisolutions.com//api/v2/reimport-scan/
                    '''
			
		sh '''
		curl -X 'POST' \
		  -H 'accept: application/json' \
		  -H "Authorization: Token ${defectdojo_token}" \
		  -H 'Content-Type: multipart/form-data' \
		  -F "scan_date=$(date +%Y-%m-%d)" \
		  -F 'lead=1' \
		  -F 'minimum_severity=Info' \
		  -F 'active=true' \
		  -F 'verified=true' \
		  -F "scan_type=SonarQube API Import"\
		  -F "product_name=Token-minting-Svc"\
		  -F "engagement_name=Token-minting-Svc" \
		  -F 'close_old_findings=true' \
		  -F 'push_to_jira=false' \
		  -F 'auto_create_context=true' \
		   https://defectdojo-np.geminisolutions.com//api/v2/reimport-scan/
                    '''
                 
		}
            }
        }
    }
 
}
